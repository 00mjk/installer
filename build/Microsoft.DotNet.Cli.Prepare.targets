<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="GetCurrentRuntimeInformation" AssemblyFile="$(CLIBuildDll)" />
  <UsingTask TaskName="GenerateBuildVersionInfo" AssemblyFile="$(CLIBuildDll)" />
  <UsingTask TaskName="CheckPrereqs" AssemblyFile="$(CLIBuildDll)" />
  <UsingTask TaskName="SetEnvVar" AssemblyFile="$(CLIBuildDll)" />
  <UsingTask TaskName="DotNetRestore" AssemblyFile="$(CLIBuildDll)" />
  <UsingTask TaskName="DownloadFile" AssemblyFile="$(CLIBuildDll)" />
  <UsingTask TaskName="ExtractArchive" AssemblyFile="$(CLIBuildDll)" />
  <UsingTask TaskName="ArchiveDirectory" AssemblyFile="$(CLIBuildDll)" />

  <Target Name="Prepare"
          DependsOnTargets="Init;DownloadHostAndSharedFxArtifacts;RestorePackages;ZipTemplates" />

  <Target Name="Init"
          DependsOnTargets="BuildDotnetCliBuildFramework">
    <!-- Current Runtime Information -->
    <GetCurrentRuntimeInformation>
      <Output TaskParameter="Rid" PropertyName="Rid" />
      <Output TaskParameter="Architecture" PropertyName="Architecture" />
      <Output TaskParameter="OSName" PropertyName="OSName" />
    </GetCurrentRuntimeInformation>

    <!-- Common Properties -->
    <PropertyGroup>
      <Stage0Path Condition=" '$(OSName)' == 'win' ">$(RepoRoot)/.dotnet_stage0/Windows/$(Architecture)</Stage0Path>
      <Stage0Path Condition=" '$(OSName)' == 'osx' ">$(RepoRoot)/.dotnet_stage0/Darwin</Stage0Path>
      <Stage0Path Condition=" '$(Stage0Path)' == '' ">$(RepoRoot)/.dotnet_stage0/Linux</Stage0Path>
      <DotNetPath>$(Stage0Path)</DotNetPath>

      <BaseOutputDirectory>$(RepoRoot)/artifacts/$(Rid)</BaseOutputDirectory>
      <OutputDirectory>$(BaseOutputDirectory)/stage2</OutputDirectory>
      <Stage2CompilationDirectory>$(BaseOutputDirectory)/stage2compilation</Stage2CompilationDirectory>
      <IntermediateDirectory>$(BaseOutputDirectory)/intermediate</IntermediateDirectory>
      <PackagesDirectory>$(BaseOutputDirectory)/packages</PackagesDirectory>
      <SymbolsOutputDirectory>$(BaseOutputDirectory)/stage2symbols</SymbolsOutputDirectory>
      <SharedFrameworkPublishDirectory>$(IntermediateDirectory)/sharedFrameworkPublish</SharedFrameworkPublishDirectory>
    </PropertyGroup>

    <GenerateBuildVersionInfo RepoRoot="$(RepoRoot)">
      <Output TaskParameter="VersionMajor" PropertyName="VersionMajor" />
      <Output TaskParameter="VersionMinor" PropertyName="VersionMinor" />
      <Output TaskParameter="VersionPatch" PropertyName="VersionPatch" />
      <Output TaskParameter="CommitHash" PropertyName="CommitHash" />
      <Output TaskParameter="CommitCount" PropertyName="CommitCount" />
      <Output TaskParameter="ReleaseSuffix" PropertyName="ReleaseSuffix" />
      <Output TaskParameter="VersionSuffix" PropertyName="VersionSuffix" />
      <Output TaskParameter="SimpleVersion" PropertyName="SimpleVersion" />
      <Output TaskParameter="NugetVersion" PropertyName="NugetVersion" />
      <Output TaskParameter="MsiVersion" PropertyName="MsiVersion" />
      <Output TaskParameter="VersionBadgeMoniker" PropertyName="VersionBadgeMoniker" />
      <Output TaskParameter="Channel" PropertyName="Channel" />
      <Output TaskParameter="BranchName" PropertyName="BranchName" />
    </GenerateBuildVersionInfo>

    <PropertyGroup>
      <VersionBadge>$(BaseOutputDirectory)/$(VersionBadgeMoniker)_$(Configuration)_version_badge.svg</VersionBadge>
      <SdkVersion>$(NugetVersion)</SdkVersion>
      
      <SdkProjectJsonVersion>$(VersionMajor).$(VersionMinor).$(VersionPatch)-preview3-$(CommitCount)</SdkProjectJsonVersion>
      <ProjectModelProjectJsonVersion>$(VersionMajor).$(VersionMinor).$(VersionPatch)-rc4-$(CommitCount)</ProjectModelProjectJsonVersion>
      <DependencyModelAndInternalAbstractionsProjectJsonVersion>$(VersionMajor).$(VersionMinor).1-beta-$(CommitCount)</DependencyModelAndInternalAbstractionsProjectJsonVersion>

      <ArchiveExtension Condition=" '$(OSName)' == 'win' ">.zip</ArchiveExtension>
      <ArchiveExtension Condition=" '$(OSName)' != 'win' ">.tar.gz</ArchiveExtension>

      <InstallerExtension Condition=" '$(OSName)' == 'win' ">.msi</InstallerExtension>
      <InstallerExtension Condition=" '$(OSName)' == 'osx' ">.pkg</InstallerExtension>
      <InstallerExtension Condition=" '$(OSName)' == 'ubuntu' ">.deb</InstallerExtension>

      <BundleExtension Condition=" '$(OSName)' == 'win' ">.exe</BundleExtension>
      <BundleExtension Condition=" '$(OSName)' == 'osx' ">$(InstallerExtension)</BundleExtension>
      <BundleExtension Condition=" '$(OSName)' == 'ubuntu' ">$(InstallerExtension)</BundleExtension>

      <ProductMonikerRid Condition=" '$(Rid)' == 'ubuntu.16.04-x64' Or '$(Rid)' == 'fedora.23-x64' Or '$(Rid)' == 'opensuse.13.2-x64' ">$(Rid)</ProductMonikerRid>
      <ProductMonikerRid Condition=" '$(ProductMonikerRid)' == '' ">$(OSName)-$(Architecture)</ProductMonikerRid>

      <ArtifactNameSdk>dotnet-sdk</ArtifactNameSdk>
      <ArtifactNameSdkDebug>dotnet-sdk-debug</ArtifactNameSdkDebug>
      <ArtifactNameCombinedHostHostFxrFrameworkSdk>dotnet-dev</ArtifactNameCombinedHostHostFxrFrameworkSdk>
      <ArtifactNameCombinedFrameworkSdk>dotnet-sharedframework-sdk</ArtifactNameCombinedFrameworkSdk>

      <ArtifactNameWithVersionSdk>$(ArtifactNameSdk)-$(ProductMonikerRid).$(SdkVersion)</ArtifactNameWithVersionSdk>
      <ArtifactNameWithVersionSdkDebug>$(ArtifactNameSdkDebug)-$(ProductMonikerRid).$(SdkVersion)</ArtifactNameWithVersionSdkDebug>
      <ArtifactNameWithVersionCombinedHostHostFxrFrameworkSdk>$(ArtifactNameCombinedHostHostFxrFrameworkSdk)-$(ProductMonikerRid).$(SdkVersion)</ArtifactNameWithVersionCombinedHostHostFxrFrameworkSdk>
      <ArtifactNameWithVersionCombinedFrameworkSdk>$(ArtifactNameCombinedFrameworkSdk)-$(ProductMonikerRid).$(SdkVersion)</ArtifactNameWithVersionCombinedFrameworkSdk>

      <!-- Downloaded Installers + Archives -->
      <SharedHostInstallerFileName Condition=" '$(InstallerExtension)' != '' ">dotnet-host-$(ProductMonikerRid).$(SharedHostVersion)$(InstallerExtension)</SharedHostInstallerFileName>
      <SharedHostInstallerFile Condition=" '$(InstallerExtension)' != '' ">$(PackagesDirectory)/$(SharedHostInstallerFileName)</SharedHostInstallerFile>

      <HostFxrInstallerFileName Condition=" '$(InstallerExtension)' != '' ">dotnet-hostfxr-$(ProductMonikerRid).$(HostFxrVersion)$(InstallerExtension)</HostFxrInstallerFileName>
      <HostFxrInstallerFile Condition=" '$(InstallerExtension)' != '' ">$(PackagesDirectory)/$(HostFxrInstallerFileName)</HostFxrInstallerFile>

      <SharedFrameworkInstallerFileName Condition=" '$(InstallerExtension)' != '' ">dotnet-sharedframework-$(ProductMonikerRid).$(SharedFrameworkVersion)$(InstallerExtension)</SharedFrameworkInstallerFileName>
      <SharedFrameworkInstallerFile Condition=" '$(InstallerExtension)' != '' ">$(PackagesDirectory)/$(SharedFrameworkInstallerFileName)</SharedFrameworkInstallerFile>

      <CombinedFrameworkHostCompressedFileName>dotnet-$(ProductMonikerRid).$(SharedFrameworkVersion)$(ArchiveExtension)</CombinedFrameworkHostCompressedFileName>

      <SdkBrandName>Microsoft .NET Core 1.0.0 - SDK Preview 2</SdkBrandName>
    </PropertyGroup>

    <CheckPrereqs />

    <!-- SetTelemetryProfile -->
    <SetEnvVar Name="DOTNET_CLI_TELEMETRY_PROFILE" Value="https://github.com/dotnet/cli;$(CommitHash)" />
  </Target>

  <Target Name="SetupDownloadHostAndSharedFxInputsOutputs" DependsOnTargets="Init">
    <PropertyGroup>
      <CoreSetupBlobRootUrl>https://dotnetcli.blob.core.windows.net/dotnet/$(CoreSetupChannel)</CoreSetupBlobRootUrl>
      <SharedFrameworkArchiveBlobRootUrl>$(CoreSetupBlobRootUrl)/Binaries/$(SharedFrameworkVersion)</SharedFrameworkArchiveBlobRootUrl>
      <CoreSetupInstallerBlobRootUrl>$(CoreSetupBlobRootUrl)/Installers</CoreSetupInstallerBlobRootUrl>

      <CoreSetupDownloadDirectory>$(IntermediateDirectory)/coreSetupDownload/$(SharedFrameworkVersion)</CoreSetupDownloadDirectory>
      <CombinedSharedHostAndFrameworkArchive>$(CoreSetupDownloadDirectory)/combinedSharedHostAndFrameworkArchive</CombinedSharedHostAndFrameworkArchive>
    </PropertyGroup>

    <ItemGroup>
      <_DownloadAndExtractItem Include="CombinedSharedHostAndFrameworkArchive"
                               Condition="!Exists('$(CombinedSharedHostAndFrameworkArchive)')">
        <Url>$(SharedFrameworkArchiveBlobRootUrl)/$(CombinedFrameworkHostCompressedFileName)</Url>
        <DownloadFileName>$(CombinedSharedHostAndFrameworkArchive)</DownloadFileName>
        <ExtractDestintation>$(SharedFrameworkPublishDirectory)</ExtractDestintation>
      </_DownloadAndExtractItem>

      <_DownloadAndExtractItem Include="SharedFrameworkInstallerFile"
                               Condition="!Exists('$(SharedFrameworkInstallerFile)')">
        <Url>$(CoreSetupInstallerBlobRootUrl)/$(SharedFrameworkVersion)/$(SharedFrameworkInstallerFileName)</Url>
        <DownloadFileName>$(SharedFrameworkInstallerFile)</DownloadFileName>
        <ExtractDestintation></ExtractDestintation>
      </_DownloadAndExtractItem>

      <_DownloadAndExtractItem Include="SharedHostInstallerFile"
                               Condition="!Exists('$(SharedHostInstallerFile)')">
        <Url>$(CoreSetupInstallerBlobRootUrl)/$(SharedHostVersion)/$(SharedHostInstallerFileName)</Url>
        <DownloadFileName>$(SharedHostInstallerFile)</DownloadFileName>
        <ExtractDestintation></ExtractDestintation>
      </_DownloadAndExtractItem>

      <_DownloadAndExtractItem Include="HostFxrInstallerFile"
                               Condition="!Exists('$(HostFxrInstallerFile)')">
        <Url>$(CoreSetupInstallerBlobRootUrl)/$(HostFxrVersion)/$(HostFxrInstallerFileName)</Url>
        <DownloadFileName>$(HostFxrInstallerFile)</DownloadFileName>
        <ExtractDestintation></ExtractDestintation>
      </_DownloadAndExtractItem>
    </ItemGroup>
  </Target>

  <Target Name="DownloadHostAndSharedFxArtifacts"
          DependsOnTargets="SetupDownloadHostAndSharedFxInputsOutputs">

    <DownloadFile Condition=" '@(_DownloadAndExtractItem)' != '' "
                  Uri="%(_DownloadAndExtractItem.Url)"
                  DestinationPath="%(_DownloadAndExtractItem.DownloadFileName)" />

    <ExtractArchive Condition=" '%(_DownloadAndExtractItem.ExtractDestintation)' != '' "
                    InputFile="%(_DownloadAndExtractItem.DownloadFileName)"
                    DestinationDirectory="%(_DownloadAndExtractItem.ExtractDestintation)" />
  </Target>

  <Target Name="RestorePackages"
          DependsOnTargets="Init">

    <DotNetRestore WorkingDirectory="$(RepoRoot)/src" ToolPath="$(DotNetPath)" />
    <DotNetRestore WorkingDirectory="$(RepoRoot)/tools" ToolPath="$(DotNetPath)" />

  </Target>

  <Target Name="ZipTemplates">
    <PropertyGroup>
      <_DotNetNewFolder>$(RepoRoot)/src/dotnet/commands/dotnet-new</_DotNetNewFolder>
    </PropertyGroup>

    <ItemGroup>
      <DotNetNewArchive Include="$([System.IO.Directory]::GetDirectories($(_DotNetNewFolder)))" />
    </ItemGroup>

    <ArchiveDirectory InputDirectory="%(DotNetNewArchive.FullPath)"
                      FileName="$([System.IO.Path]::GetFileName(%(DotNetNewArchive.FullPath)))"
                      OutputDirectory="%(DotNetNewArchive.RelativeDir)"
                      ForceZipArchive="true" />
  </Target>

</Project>
